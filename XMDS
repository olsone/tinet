* Does an XModem file transfer
XMODEM LIMI >0000
       STWP R0
       MOV  R0,@OLDWP
       MOV  R11,@OLDPC
       STST R0
       MOV  R0,@OLDST
       MOV  @>83C4,@INTSAV  Save old interrupt routine.
       LWPI XREGS
 
* Save some of PAD which Extended BASIC uses.
       LI   R0,ADDINF
       LI   R1,SAVPAD
       LI   R2,>000A
SLOOP1 MOVB *R0+,*R1+
       DEC  R2
       JNE  SLOOP1
 
* Load R5 with the routine address
       LI   R5,SENDS1
       LI   R0,JIFFY
       MOV  R0,@>83C4
       CLR  R0
       LI   R1,>0001
       BLWP @NUMREF
       BLWP @XMLLNK
       DATA CFI
       MOV  @FAC,R14
       CLR  R0
       INC  R1
       LI   R2,XMDNAM
       LI   R3,'  '
       LI   R4,>000A
XMDL1  MOVB R3,*R2+
       DEC  R4
       JNE  XMDL1
       LI   R2,XMDLEN
       LI   R3,>0A00
       MOVB R3,*R2
       BLWP @STRREF
 
* Get CRC usage flag.
       CLR  R0
       INCT R1
       BLWP @NUMREF
       BLWP @XMLLNK
       DATA CFI
       SETO @CRCFLG
       MOV  @FAC,R2
       JEQ  USECRC
       CLR  @CRCFLG
USECRC CLR  R0
       DEC  R1
       BLWP @NUMREF
       BLWP @XMLLNK
       DATA CFI
 
* Set up blocks for disk DSR direct file access.
       SLA  R14,>08
       MOV  R14,@>834C   Drive number and access code.
       CLR  @>8350       Pointer to additional info block.
       LI   R0,FNAME
       LI   R1,XMDNAM
       LI   R2,>000A
       BLWP @VMBW
       MOVB @XMDLEN,R0
       AI   R0,>0500
       MOVB R0,@LEN1
       AI   R14,'0'*>0100+'.' So this makes the correct ASCII drive number and
*                             the period.
       MOVB R14,@DRIVE#
       SWPB R14
       MOVB R14,@DRIVE#+>0001
       MOV  @>834C,R14
       MOV  @FAC,R1
       JEQ  SF
       B    @RF
 
* Send a file using XModem (Christensen) protocol.
 
* Get file information.
SF     BL   @FILE2
       DATA >0114
       CLR  R0
       MOVB @>8350,R0
       JEQ  XSJ1
       LI   R0,>0001
       B    @ABORT
XSJ1   INC  R14          Change to read one sector at a time.
       LI   R0,RECORD
       LI   R1,>CA53
XSL1   MOV  R1,*R0+
       CI   R0,RECORD+>0080
       JLT  XSL1
       LI   R0,HEDDAT
       LI   R1,RECORD
       LI   R2,>0008
       MOV  R2,R3
XSL1A  MOV  *R0+,*R1+
       DECT R3
       JNE  XSL1A
       LI   R0,ADDINF+>0002
XSL1B  MOV  *R0+,*R1+
       DECT R2
       JNE  XSL1B
       MOV  @SEC#,R9
 
* Wait for the initial "NAK"
       CLR  R10
       CLR  @REC#
 
XSL2B  BLWP @RECNM
       BL   @GETACK
       CLR  R6
       CI   R1,NAK*>0100
       JEQ  XSNAK
       CI   R1,CRC*>0100
       JEQ  XSCRC
       JMP  XSL2B
 
XSCRC  SETO R6
 
* Don't send directory header if it's a Dis/Fix 128 file.
XSNAK  CLR  @REC#
       CLR  @SEC#
       MOV  @>8304,R0    Is the file Dis/Fix 128?
       DECT R0
       JNE  XSJ3
       MOVB @>8307,R0
       CI   R0,>8000
       JEQ  XSL3
XSJ3   BL   @SENDR
 
* Loop to read sectors.
XSL3   BL   @FILE2
       DATA >0114
       LI   R0,SECTOR
       LI   R1,RECORD
       LI   R2,>0080
       BLWP @VMBR
       BL   @SENDR
       LI   R0,SECTOR
       LI   R1,RECORD
       LI   R2,>0080
       A    R2,R0
       BLWP @VMBR
       BL   @SENDR
       INC  @SEC#
       DEC  R9
       JNE  XSL3
 
* Since we are done, send "EOT."
XSL4   LI   R0,EOT*>0100
       BL   *R5
       BL   @GETACK
       MOV  R0,R0
       JNE  XSL4
       B    @STOP
 
* SENDR : Send one record using the protocolm reception of a CANcel character
*         stops the file transfer.
SENDR  MOV  R11,R15
       CLR  R10
       INC  @REC#
SENDR1 BLWP @RECNM       ****************
       LI   R0,SOH*>0100
       BL   *R5
       MOVB @REC#+1,R0
       BL   *R5
       INV  R0
       BL   *R5
       CLR  R7
       CLR  R8
       LI   R3,RECORD
SENDR2 MOVB *R3+,R0
       BL   *R5
       BL   @CRCUPD
       CI   R3,RECORD+>0080
       JLT  SENDR2
       MOVB R7,R0
       MOV  R6,R6
       JEQ  SENDR3
       MOV  R8,R0
       BL   *R5
       SWPB R0
SENDR3 BL   *R5
       BL   @GETACK
       MOV  R0,R0
       JNE  SENDR1
       B    *R15
 
* Now to get ACK or NAK or whatever...
GETACK MOV  R11,R13
       LI   R0,SEC#12
GETA1  BL   @GETS1
       JEQ  TRYAGA
       CLR  R0
       ANDI R1,>7F00
       CI   R1,CAN*>0100
       JEQ  GABORT
       CI   R1,ACK*>0100
       JEQ  GETA2
       CI   R1,NAK*>0100
       JEQ  TRYAGA
       CI   R1,CRC*>0100
       JNE  GETA1
TRYAGA INC  R10
       LI   R0,>0003
       CI   R10,>0009
       JGT  GAB2
       SETO R0
GETA2  B    *R13
GABORT LI   R0,>0004
GAB2   B    @ABORT
 
SAVRTJ DATA >0000
SENDS1 MOV  R11,@SAVRTJ
       BL   @LITEON
       AI   R12,>0040
       SBO  RTSON
SENDS2 TB   XBRE
       JNE  SENDS2
       LDCR R0,>08
       SBZ  RTSON
       BL   @LITEOF
       AI   R12,>0040
       MOV  @SAVRTJ,R11
       RT
* End of routines to send file.
 
* Routines to receive a file, saves it as Dis/Fix 128 if it's not uploaded with
* the (in)famous TIFILES header used by TI compatible communications programs.
RF     LI   R4,CRC*>0100
       MOV  @CRCFLG,R6
       JNE  CRC#J1
       LI   R4,NAK*>0100
CRC#J1 SETO @FIRST1
       CLR  R10
       CLR  @REC#
       INC  @REC#
       BLWP @RECNM       ***************************
 
* Loop to get records.  Send ACK/NAK for last record (CRC or NAK if this is
* the first record).
RDLOOP CLR  R0
       MOVB R4,R0
       BL   *R5
       LI   R0,SEC#10
       BL   @GETS1
       JEQ  SOH3
       ANDI R1,>FF00
       CI   R1,SOH*>0100
       JEQ  GOTSOH
       CI   R1,CAN*>0100
       JNE  SOH2A
       B    @RFCAN
SOH2A  CI   R1,EOT*>0100
       JNE  SOH3
       B    @RCLOSE
SOH3   BL   @RECRTY
       JMP  RDLOOP
 
GOTSOH LI   R0,SEC#10
       BL   @GETS1
       JEQ  SOH3
       CLR  R3
       MOVB R1,R3
       AI   R3,>0100
       MOVB R1,@TEMPR#
       CB   R1,@REC#+>0001
       JEQ  GOTSO1
       MOV  @FIRST1,R0
       JNE  SOH3
       CB   R3,@REC#+>0001
       JNE  SOH3
 
* It seems they missed our ACK, read this record and throw it away.
GOTSO1 LI   R0,SEC#10
       BL   @GETS1
       JEQ  SOH3
       AB   R1,R3
       JNE  SOH3         Check for correct header.
       LI   R3,RECORD
       CLR  R7
       CLR  R8
RCHR1  LI   R0,SEC#10
       BL   @GETS1
       JEQ  SOH3
       MOVB R1,*R3+
       MOVB R1,R0
       BL   @CRCUPD
       CI   R3,RECORD+>0080
       JLT  RCHR1
 
* Now to get either the CRC or the checksum.
       LI   R0,SEC#10
       BL   @GETS1
       JEQ  SOH3
       MOV  R6,R6
       JEQ  GOTCHK
       MOVB R1,R0
       BL   @CRCUPD
 
       LI   R0,SEC#10
       BL   @GETS1
       JEQ  SOH3
       MOVB R1,R0
       BL   @CRCUPD
       MOV  R8,R8
       JNE  SOH3
       JMP  RECOK
GOTCHK CB   R1,R7
       JNE  SOH3
RECOK  LI   R4,ACK*>0100
       CLR  R10
 
* Now to send it to a disk file.
       MOV  @FIRST1,R0
       JEQ  RECWRT
 
* Open the file.
       CLR  @FIRST1
       CLR  @XMDPAB+>0002
       LI   R0,RECORD
       LI   R1,HEDDAT
       LI   R2,>0008
       MOV  R2,R3
OPNL1  C    *R0+,*R1+
       JNE  DF128
       DECT R2
       JNE  OPNL1
       LI   R1,>8302
OPNL2  MOV  *R0+,*R1+
       DECT R3
       JNE  OPNL2
 
* It's a TI-99/4A compatible file (most probably).
       BL   @FILE2
       DATA >0115
       CLR  @SEC#
       INC  R14          Change to write one sector at a time.
       CLR  R0
       MOVB @>8350,R0
       JEQ  UPDATE
OPERR  LI   R0,>0002
       B    @ABORT
 
* It's a file we didn't send, take it anyway (as a Dis/Fix 128 file).
DF128  LI   R0,OPENXX*>0100+>0003
       MOV  R0,@XMDPAB
       BL   @FILE
       JMP  DFWRT
 
* RECWRT writes a record into the buffer, flushes the Buffer if it's full.
RECWRT MOV  @XMDPAB+>0002,R0
       JNE  DFWRT
       LI   R0,SECTOR
       LI   R1,RECORD
       LI   R2,>0080
       MOVB @TEMPR#,R3
       ANDI R3,>0100
       JNE  SECW1
       BLWP @VMBW
       JMP  UPDATE
SECW1  A    R2,R0
       BLWP @VMBW
       BL   @FILE2
       DATA >0115
       INC  @SEC#
       JMP  UPDATE
 
DFWRT  LI   R0,WRITE*>0100+>0003
       MOV  R0,@XMDPAB
       BL   @FILE
UPDATE INC  @REC#
       BLWP @RECNM       *********************
       B    @RDLOOP
 
RECRTY INC  R10
       BLWP @RECNM       *********************
       MOV  @FIRST1,R1
       JEQ  RTY1
       MOV  R6,R6
       JEQ  RTY1
       LI   R4,CRC*>0100
       CI   R10,>0005
       JLT  RTY3
       CLR  R10
       CLR  R6
       JMP  RTY2
RTY1   CI   R10,>0009
       JLT  RTY2
 
* Delete the incomplete file.
RFCAN  LI   R0,CAN*>0100
       BL   *R5
       LI   R0,DELETE*>0100+>0003
       MOV  R0,@XMDPAB
       BL   @FILE
       LI   R0,>0003
       B    @ABORT
RTY2   LI   R4,NAK*>0100
RTY3   B    @RDLOOP
 
RCLOSE MOV  @XMDPAB+>0002,R0
       JEQ  RCL2
       LI   R0,CLOSE*>0100+>0003
       MOV  R0,@XMDPAB
       BL   @FILE
RCL2   LI   R0,ACK*>0100
       BL   *R5
       B    @STOP
 
* Routine to get a character or test the break key.
GETS1  MOV  R11,@SAVRTJ
       MOV  R0,@TIMER
GETS1A LI   R12,>1340
       TB   RBRL
       JEQ  GOT1
 
* Have we timed out?
       LIMI >0001
       LIMI >0000
       SETO R1
       MOV  @TIMER,R0
       JEQ  GETS1B
 
* Is the SysOp pressing break?
       LI   R12,>0024
       CLR  R0
       LDCR R0,>03
       TB   ->0B         (FCTN key)
       JEQ  GETS1C       Not pressed.
       LI   R0,>0300
       LDCR R0,>03
       TB   ->0B         ( "4" key)
       JNE  GETS1D       Pressed.
GETS1C LI   R0,>0006
       MOVB @9500,@9500
       JNE  GETS1A
       LI   R12,>1380
       TB   >1C
       JNE  GETS1E       Lost carrier!
       JMP  GETS1A
GETS1D LI   R0,>0005
GETS1E B    @ABORT       Abory by SysOp.
 
GOT1   BL   @LITEON
       AI   R12,>0040
       STCR R1,>08
       SBZ  RIENB
       BL   @LITEOF
       LI   R12,>1340
       CLR  R0
       DEC  R0           To set timeOut status properly.
GETS1B MOV  @SAVRTJ,R11
       RT                Equal status bit set indicates timeOut.
 
* Interrupt routine for Jiffy Timer
JIFFY  MOV  @TIMER,R0
       DEC  R0
       JLT  JRET
       MOV  R0,@TIMER
JRET   RT
 
* File I/O Routines.
* Routine to use a file as Dis/Fix 128
FILE   LI   R0,SECTOR
       LI   R1,RECORD
       LI   R2,>0080
       A    R2,R0
       MOV  R0,@XMDPAB+>0002
       BLWP @VMBW
       S    R2,R0
       LI   R1,XMDPAB
       LI   R2,>001A
       BLWP @VMBW
       AI   R0,>0009
       MOV  R0,@>8356
       BLWP @DSRLNK
       DATA >0008
       JNE  FILERT
       LI   R11,OPERR
FILERT RT
 
* Use a file for direct sector access.
FILE2  MOV  *R11+,R1
       LI   R0,NAMLEN
       MOV  R0,@>8356
       BLWP @VSBW
       INC  R0
       SWPB R1
       BLWP @VSBW
       LI   R0,SECTOR
       MOV  R0,@ADDINF
       MOV  R14,@>834C
       LI   R0,FNAME
       MOV  R0,@>834E
       CLR  @>8350
       BLWP @DSRLNK
       DATA >000A
       RT
 
DSRLNK DATA DREGS,$+>0002
       MOV  *R14+,R5
       SZCB @HEX20,R15
       MOV  @>8356,R0
       MOV  R0,R9
       AI   R9,>FFF8
       BLWP @VSBR
       MOVB R1,R3
       SRL  R3,>08
       SETO R4
       LI   R2,NAMBUF
DLOOP1 INC  R0
       INC  R4
       C    R4,R3
       JEQ  DJUMP1
       BLWP @VSBR
       MOVB R1,*R2+
       CB   R1,@PERIOD
       JNE  DLOOP1
DJUMP1 MOV  R4,R4
       JEQ  DJUMP6
       CI   R4,>0007
       JGT  DJUMP6
       CLR  @>83D0
       MOV  R4,@>8354
       INC  R4
       A    R4,@>8356
       LWPI GPLWS
       CLR  R1
       LI   R12,>0F00
DLOOP2 MOV  R12,R12
       JEQ  DJUMP2
       SBZ  >00
DJUMP2 AI   R12,>0100
       CLR  @>83D0
       CI   R12,>2000
       JEQ  DJUMP5
       MOV  R12,@>83D0
       SBO  >00
       LI   R2,>4000
       CB   *R2,@HEXAA
       JNE  DLOOP2
       A    @5*2+DREGS,R2
       JMP  DJUMP3
DLOOP3 MOV  @>83D2,R2
       SBO  >00
DJUMP3 MOV  *R2,R2
       JEQ  DLOOP2
       MOV  R2,@>83D2
       INCT R2
       MOV  *R2+,R9
       MOVB @>8355,R5
       JEQ  DJUMP4
       CB   R5,*R2+
       JNE  DLOOP3
       SRL  R5,>0008
       LI   R6,NAMBUF
DLOOP4 CB   *R6+,*R2+
       JNE  DLOOP3
       DEC  R5
       JNE  DLOOP4
DJUMP4 INC  R1
       BL   *R9
       JMP  DLOOP3
       SBZ  >00
       LWPI DREGS
       MOV  R9,R0
       BLWP @VSBR
       SRL  R1,>0D
       JNE  DJUMP7
       RTWP
 
DJUMP5 LWPI DREGS
DJUMP6 CLR  R1
DJUMP7 SWPB R1
       MOVB R1,*R13
       SOCB @HEX20,R15
       RTWP
 
* Abort anything.
* Query abort.
STOP   CLR  R0
ABORT  MOV  R0,@FAC
       BLWP @XMLLNK
       DATA CIF          Concert integer to floating point.
 
* Restore part of PAD Which Extended BASIC uses.
       LI   R0,ADDINF
       LI   R1,SAVPAD
       LI   R2,>000A
SLOOP2 MOVB *R1+,*R0+
       DEC  R2
       JNE  SLOOP2
       LI   R1,>0003
       CLR  R0
       MOVB @ZERO,@STATUS
       BLWP @NUMASG
       LWPI XREGS+>0006
       MOV  @INTSAV,@>83C4
       MOVB @ZERO,@STATUS
       RTWP
RECORD EQU  STRBUF
 
*******************************************************************************
*                          CRC SUBROUTINES
*
* UPDATE CRC VALUE FROM CURRENT CHAR
* CHAR IN R0 HIGH BYTE
*
* THE CRC POLYNOMIAL IS:
* X^16 + X^12 + X^5 + 1
CRCUPD AB   R0,R7
       MOV  R0,R1
       ANDI R1,>FF00     Clear LSByte.
       XOR  R1,R8        XOr New Data with old CRC.
       MOV  R8,R1        Move to scratch register.
       SRL  R1,>04
       XOR  R8,R1        XOr CRC with scratch.
       ANDI R1,>FF00     Clear LSB.
       SRL  R1,>04
       XOR  R1,R8        XOr scratch with CRC.
       SRC  R1,>07
       XOR  R1,R8        XOr scratch with CRC.
       SWPB R8           Reverse bytes of CRC.
       RT                Return to calling code.
* End of CRC subroutines.
 
* Added --- show record #.
* Cheap little routine to brute-force show record #.
RECNM  DATA STREGS,$+>0002
       MOV  @REC#,R2
 
       MOV  R2,R3
       MOV  R3,R4
       MOV  R4,R5
 
       SRL  R2,>0C
       SRL  R3,>08
       SRL  R4,>04
 
       ANDI R2,>000F
       ANDI R3,>000F
       ANDI R4,>000F
       ANDI R5,>000F
 
       LI   R0,RSTR#
       MOVB @HEX(R2),*R0+
       MOVB @HEX(R3),*R0+
       MOVB @HEX(R4),*R0+
       MOVB @HEX(R5),*R0
* Retry #.
       MOV  R13,R0
       AI   R0,>0014
       MOV  *R0,R0
       AI   R0,HEX
       MOVB *R0,@RSTRR#
 
       LI   R0,1602+SCROFS  (80 columns)
*       LI   R0,802+SCROFS  (40 columns)
       LI   R1,RSTR
       LI   R2,>001C
* Comment out the next line for 40 column operation.
       MOVB @BANK2,@BANKAD
       BLWP @VMBW
* Comment out the next 3 lines for 40 column operation.
       MOVB @ZERO,@BANKAD
       LI   R0,>0E00






























